{"version":3,"sources":["elv.png","components/Elevator.jsx","components/Floor.jsx","components/Building.jsx","App.js","index.js"],"names":["Elevator","elevatorIndex","elevatorsQueues","elevatorSpeed","elevatorDelay","elevatorLocation","removeFromQueue","updateElevatorLocation","queue","currentDuration","Math","abs","isQueue","length","target","useEffect","console","log","defaultStyle","transition","bottom","transitionStyles","entering","entered","exiting","exited","Transition","timeout","onEntered","onExited","in","state","onAnimationEnd","style","onClick","className","src","ElevatorImg","alt","Floor","floorId","addToQueue","isPressed","elevators","flat","findIndex","floor","Building","floorsCount","elevatorsCount","floors","Array","fill","useState","from","setElevatorsQueues","elevatorsLocations","setElevatorsLocations","correctElevatorIndex","chooseCorrectElevatorIndex","copy","push","shift","location","elevatorsTimes","Infinity","forEach","i","time","reduce","acc","indexOf","min","map","elevatorQueue","App","buildings","setBuildings","fetchData","useCallback","a","db","response","building","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4eebe56a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/elv.57cf1df4.png\";","import { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Transition } from 'react-transition-group';\r\nimport ElevatorImg from \"../elv.png\"\r\n// import { usePrevious } from \"./hooks/usePrevious\";\r\n\r\n// function usePrevious(value, initial) {\r\n//     const equals = (a, b) =>\r\n//         a.length === b.length &&\r\n//         a.every((v, i) => v === b[i]);\r\n//     const ref = useRef({ target: value, previous: initial });\r\n//     if (!equals(ref.current.target, value)) {\r\n//         ref.current.previous = ref.current.target;\r\n//         ref.current.target = value;\r\n//     }\r\n//     return ref.current.previous;\r\n// }\r\n\r\nconst Elevator = ({ elevatorIndex, elevatorsQueues, elevatorDelay, elevatorSpeed, elevatorLocation, removeFromQueue, updateElevatorLocation }) => {\r\n    const queue = elevatorsQueues[elevatorIndex]\r\n    // const prevQueue = usePrevious(elevatorsQueues[elevatorIndex])\r\n\r\n    // const [actions, setActions] = useState([]);\r\n\r\n    // const [elevatorY, setElevatorY] = useState(elevatorLocation);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(elevatorY);\r\n    // }, [elevatorY])\r\n\r\n    const currentDuration = 1000 * (Math.abs(queue[0] - elevatorLocation) / elevatorSpeed)\r\n\r\n    const isQueue = queue[0] && !!queue[0].length\r\n    const target = isQueue ? queue[0] * 110 : elevatorLocation * 110\r\n\r\n    useEffect(() => {\r\n        console.log('Queue', elevatorIndex, \":\", queue);\r\n        console.log('elevatorLocation', elevatorIndex, \":\", elevatorLocation);\r\n        if (queue.length) {\r\n            // updateElevatorStatus()\r\n\r\n            updateElevatorLocation(elevatorIndex, queue[0])\r\n            removeFromQueue(elevatorIndex)\r\n        }\r\n    }, [elevatorsQueues])\r\n\r\n\r\n    // const updateElevatorStatus = useCallback(async () => {\r\n    //     await setTimeout(() => {\r\n    //         updateElevatorLocation(elevatorIndex, queue[0])\r\n    //     }, currentDuration);\r\n    //     await setTimeout(() => {\r\n    //         removeFromQueue(elevatorIndex)\r\n    //     }, currentDuration + elevatorDelay);\r\n    // }, [])\r\n\r\n    //==============================================\r\n    // const fetchData = useCallback(async () => {\r\n    // \tlet response = await db;\r\n    // \tsetBuildings(response);\r\n    // }, []);\r\n    // useEffect(() => {\r\n    // \tfetchData();\r\n    // }, [fetchData]);\r\n    //=======================================\r\n\r\n    // const addNewActions = () => {\r\n    //     const origin = queue.length > 1 ? queue[queue.length - 2] : elevatorLocation\r\n    //     const moveAction = {\r\n    //         type: \"move\",\r\n    //         origin,\r\n    //         target: queue[queue.length - 1],\r\n    //         isMoveUp: origin < queue[queue.length - 1],\r\n    //     }\r\n    //     const delayAction = {\r\n    //         type: \"delay\",\r\n    //         delay: elevatorDelay\r\n    //     }\r\n    //     setActions([...actions, moveAction, delayAction])\r\n    // }\r\n\r\n    // const removeAction = () => {\r\n    //     const copy = [...actions]\r\n    //     copy.shift()\r\n    //     setActions(copy)\r\n    // }\r\n\r\n    // const updateActions = () => {\r\n    //     // if (!prevQueue) return\r\n    //     console.log('getting prev queue:', prevQueue);\r\n    //     // if (prevQueue.length < queue.length)\r\n    //     addNewActions()\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     console.log('actions', elevatorIndex, \":\", actions);\r\n    // }, [actions])\r\n\r\n\r\n    // TODO: Call removeFromQueue after task complete and run next task\r\n\r\n\r\n\r\n    // const [elevatorQueue, setElevatorQueue] = useState([])\r\n    // useEffect(() => {\r\n    //     setElevatorQueue([...elevatorQueue, newFloorId])\r\n    //     const interval = setInterval(() => {\r\n    //         const filteredQueue = [...elevatorQueue]\r\n    //         filteredQueue.shift()\r\n    //         setElevatorQueue(filteredQueue)\r\n    //         console.log(elevatorQueue);\r\n    //         removeFromMainQueue()\r\n    //         if (elevatorQueue.length = 0) clearInterval(interval)\r\n    //     }, 4000);\r\n    // }, [newFloorId])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const defaultStyle = {\r\n        transition: `bottom ${currentDuration}ms ease`,\r\n        bottom: elevatorLocation * 110\r\n    };\r\n    const transitionStyles = {\r\n        entering: { bottom: elevatorLocation * 110 },\r\n        entered: { bottom: elevatorLocation * 110 },\r\n        exiting: { bottom: target },\r\n        exited: { bottom: target }\r\n    };\r\n\r\n    const onEnteredHandle = () => {\r\n        console.log('entered');\r\n    }\r\n    const onExitedHandle = () => {\r\n        console.log('exited');\r\n    }\r\n\r\n    return <Transition\r\n        timeout={currentDuration}\r\n        // timeout={currentDuration + elevatorDelay}\r\n        // timeout={{\r\n        //     appear: 0,\r\n        //     enter: 0,\r\n        //     exit: currentDuration + elevatorDelay,\r\n        //     // exit: currentDuration,\r\n        // }}\r\n        onEntered={console.log('entered')}\r\n        onExited={console.log('exited')}\r\n        in={isQueue}>\r\n        {state => (\r\n            <img\r\n                onAnimationEnd={console.log('maaaaaaaaa')}\r\n                style={{\r\n                    ...defaultStyle,\r\n                    ...transitionStyles[state]\r\n                }}\r\n                onClick={() => {\r\n                    updateElevatorLocation(elevatorIndex, queue[0])\r\n                    removeFromQueue(elevatorIndex)\r\n                }}\r\n                className=\"elevator\"\r\n                // style={{\r\n                //     \"bottom\": 0 + \"px\",\r\n                //     \"transform\": \"translateY(-\" + elevatorY + \"px)\"\r\n                // }}\r\n                src={ElevatorImg} alt=\"\" />\r\n        )}\r\n    </Transition >\r\n}\r\nexport default Elevator","const Floor = ({ floorId, addToQueue, elevators }) => {\r\n    const isPressed = elevators.flat().findIndex(floor => floor === floorId) > -1\r\n    return <div className=\"floor floor-size\">\r\n        <div className=\"blackline\"></div>\r\n        <button\r\n            className={`controller metal linear ${isPressed ? \"active\" : \"\"}`}\r\n            onClick={() => {\r\n                addToQueue(floorId)\r\n            }}\r\n        >\r\n            {floorId}\r\n        </button>\r\n    </div >\r\n}\r\nexport default Floor","import { useEffect, useState } from 'react'\r\nimport Elevator from './Elevator'\r\nimport Floor from './Floor'\r\n\r\nconst Building = ({ floorsCount, elevatorsCount, elevatorDelay, elevatorSpeed }) => {\r\n    const floors = [...Array(floorsCount).fill(null)]\r\n    const [elevatorsQueues, setElevatorsQueues] = useState(Array.from(Array(elevatorsCount), () => new Array(0)))\r\n    const [elevatorsLocations, setElevatorsLocations] = useState([...Array(elevatorsCount).fill(0)])\r\n\r\n    useEffect(() => {\r\n        // console.log('elevatorsQueues:', elevatorsQueues);\r\n        // console.log('elevatorsLocations:', elevatorsLocations);\r\n    }, [elevatorsQueues, elevatorsLocations])\r\n\r\n    // Succsessfully adding to queue after choose the correct elevator to add floorId to its correct queue\r\n    const addToQueue = (floorId) => {\r\n        let correctElevatorIndex = chooseCorrectElevatorIndex(floorId)\r\n\r\n        // If floor already in one of the queues -> do nothing\r\n        if (elevatorsQueues.flat().findIndex(floor => floor === floorId) > -1) return\r\n\r\n        // Update state\r\n        const copy = [...elevatorsQueues]\r\n        copy[correctElevatorIndex].push(floorId)\r\n        setElevatorsQueues(copy)\r\n    }\r\n\r\n    // Succsessfully removing oldest task from relevant queue using elevator index\r\n    const removeFromQueue = (elevatorIndex) => {\r\n        // If elevator queue is empty -> do nothing\r\n        if (!elevatorsQueues[elevatorIndex].length) return\r\n\r\n        // Update state - assuming removing first item in queue\r\n        const copy = [...elevatorsQueues]\r\n        copy[elevatorIndex].shift()\r\n        setElevatorsQueues(copy)\r\n    }\r\n\r\n    const updateElevatorLocation = (elevatorIndex, location) => {\r\n        // If elevator queue is empty -> do nothing\r\n        if (!elevatorsQueues[elevatorIndex].length) return\r\n        const copy = [...elevatorsLocations]\r\n        copy[elevatorIndex] = elevatorsQueues[elevatorIndex][0]\r\n        // copy[elevatorIndex] = location\r\n        setElevatorsLocations(copy)\r\n    }\r\n\r\n    const chooseCorrectElevatorIndex = (floorId) => {\r\n        const elevatorsTimes = [...Array(elevatorsCount).fill(Infinity)]\r\n        elevatorsQueues.forEach((queue, i) => {\r\n            let time\r\n            if (!queue.length) {\r\n                time = Math.abs(floorId - elevatorsLocations[i]) / elevatorSpeed\r\n            }\r\n            else {\r\n                const sumOfFloorsToTravel = queue.reduce((acc, floor, i, queue) => {\r\n                    acc = (i > 0) ? acc + Math.abs(queue[i] - queue[i - 1]) : acc + 0\r\n                    return acc\r\n                })\r\n                time = sumOfFloorsToTravel / elevatorSpeed + elevatorDelay * (queue.length) + Math.abs(floorId - queue[queue.length - 1]) / elevatorSpeed\r\n            }\r\n            elevatorsTimes[i] = time\r\n        })\r\n        // console.log('elevatorsTimes', elevatorsTimes);\r\n        return elevatorsTimes.indexOf(Math.min(...elevatorsTimes));\r\n    }\r\n\r\n    return <div className=\"building\">\r\n        <div className=\"floors\">\r\n            {floors.map((floor, i, floors) => (\r\n                <div\r\n                    className=\"floor\" key={i}>\r\n                    <Floor\r\n                        addToQueue={addToQueue}\r\n                        floorId={floors.length - i - 1}\r\n                        elevators={elevatorsQueues}\r\n                    />\r\n                </div>)\r\n            )}\r\n        </div>\r\n        <div className=\"shafts\">\r\n            {elevatorsQueues.map((elevatorQueue, i) => (\r\n                <div\r\n                    style={{ \"height\": 110 * floorsCount + 8 + \"px\" }}\r\n                    className=\"shaft\"\r\n                    key={i}\r\n                >\r\n                    <Elevator\r\n                        elevatorIndex={i}\r\n                        elevatorsQueues={elevatorsQueues}\r\n                        // elevatorQueue={elevatorQueue}\r\n                        elevatorSpeed={elevatorSpeed}\r\n                        elevatorDelay={elevatorDelay}\r\n                        elevatorLocation={elevatorsLocations[i]}\r\n                        removeFromQueue={removeFromQueue}\r\n                        updateElevatorLocation={updateElevatorLocation}\r\n                    />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    </div>\r\n}\r\nexport default Building","import \"./help.css\";\nimport \"./main.css\";\nimport Building from \"./components/Building\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport db from \"./db.json\";\n\nfunction App() {\n\tconst [buildings, setBuildings] = useState([]);\n\n\tconst fetchData = useCallback(async () => {\n\t\tlet response = await db;\n\t\tsetBuildings(response);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [fetchData]);\n\n\tif (!buildings || !buildings.length) return \"Loading...\";\n\telse\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"street\">\n\t\t\t\t\t{buildings.map((building) => (\n\t\t\t\t\t\t<Building\n\t\t\t\t\t\t\tkey={building.id}\n\t\t\t\t\t\t\tfloorsCount={building.floorsCount}\n\t\t\t\t\t\t\televatorsCount={building.elevatorsCount}\n\t\t\t\t\t\t\televatorSpeed={building.elevatorSpeed}\n\t\t\t\t\t\t\televatorDelay={building.elevatorDelay}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}