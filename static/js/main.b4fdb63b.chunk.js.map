{"version":3,"sources":["elv.png","hooks/useCountDown.js","ding.mp3","components/Elevator.jsx","components/ElevatorList.jsx","components/Floor.jsx","components/FloorList.jsx","components/Building.jsx","App.js","index.js"],"names":["useCountDown","timeToCount","interval","React","useState","timeLeft","setTimeLeft","timer","useRef","run","ts","current","started","lastInterval","localInterval","Math","min","Infinity","requestId","window","requestAnimationFrame","start","useCallback","ttc","cancelAnimationFrame","newTimeToCount","undefined","pause","resume","reset","actions","useMemo","useEffect","Elevator","elevatorIndex","elevatorsQueues","elevatorDelay","elevatorSpeed","elevatorLocation","removeFromQueue","updateElevatorLocation","useSound","DingSfx","play","elevatorQueue","nextFloor","travelDuration","abs","forcedLocation","ElevatorImgElement","src","ElevatorImg","alt","onClick","onTransitionEnd","console","log","styled","img","props","ElevatorList","elevatorsLocations","floorsCount","className","map","i","style","Floor","floorIndex","addToQueue","floorTime","isPressed","flat","findIndex","floor","toFixed","FloorList","floors","floorTimes","Building","elevatorsCount","Array","fill","from","setElevatorsQueues","setElevatorsLocations","floorsTimes","setFloorsTimes","canUpdate","setCanUpdate","updateFloorTimeStart","time","getFloorsTimes","floorsTimesCopy","floorInQueueIndex","curr","myQueue","slice","sumOfFloorsToTravel","length","forEach","queue","getCorrectElevatorIndex","elevatorsTimes","indexOf","correctElevatorIndex","queuesCopy","push","shift","locationCopy","App","buildings","setBuildings","fetchData","a","db","response","building","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4fdb63b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/elv.57cf1df4.png\";","\r\nimport React from 'react';\r\n\r\nconst useCountDown = (timeToCount = 60 * 1000, interval = 1000) => {\r\n  const [timeLeft, setTimeLeft] = React.useState(0);\r\n  const timer = React.useRef({});\r\n\r\n  const run = (ts) => {\r\n    if (!timer.current.started) {\r\n      timer.current.started = ts;\r\n      timer.current.lastInterval = ts;\r\n    }\r\n\r\n    const localInterval = Math.min(interval, (timer.current.timeLeft || Infinity));\r\n    if ((ts - timer.current.lastInterval) >= localInterval) {\r\n      timer.current.lastInterval += localInterval;\r\n      setTimeLeft((timeLeft) => {\r\n        timer.current.timeLeft = timeLeft - localInterval;\r\n        return timer.current.timeLeft;\r\n      });\r\n    }\r\n\r\n    if (ts - timer.current.started < timer.current.timeToCount) {\r\n      timer.current.requestId = window.requestAnimationFrame(run);\r\n    } else {\r\n      timer.current = {};\r\n      setTimeLeft(0);\r\n    }\r\n  }\r\n\r\n  const start = React.useCallback(\r\n    (ttc) => {\r\n      window.cancelAnimationFrame(timer.current.requestId);\r\n\r\n      const newTimeToCount = ttc !== undefined ? ttc : timeToCount\r\n      timer.current.started = null;\r\n      timer.current.lastInterval = null;\r\n      timer.current.timeToCount = newTimeToCount;\r\n      timer.current.requestId = window.requestAnimationFrame(run);\r\n\r\n      setTimeLeft(newTimeToCount);\r\n    },\r\n    [],\r\n  );\r\n\r\n  const pause = React.useCallback(\r\n    () => {\r\n      window.cancelAnimationFrame(timer.current.requestId);\r\n      timer.current.started = null;\r\n      timer.current.lastInterval = null;\r\n      timer.current.timeToCount = timer.current.timeLeft;\r\n    },\r\n    [],\r\n  );\r\n\r\n  const resume = React.useCallback(\r\n    () => {\r\n      if (!timer.current.started && timer.current.timeLeft > 0) {\r\n        window.cancelAnimationFrame(timer.current.requestId);\r\n        timer.current.requestId = window.requestAnimationFrame(run);\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  const reset = React.useCallback(\r\n    () => {\r\n      if (timer.current.timeLeft) {\r\n        window.cancelAnimationFrame(timer.current.requestId);\r\n        timer.current = {};\r\n        setTimeLeft(0);\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  const actions = React.useMemo(\r\n    () => ({ start, pause, resume, reset }),\r\n    [],\r\n  );\r\n\r\n  React.useEffect(() => reset, []);\r\n\r\n  return [timeLeft, actions];\r\n}\r\n\r\nexport default useCountDown;","export default __webpack_public_path__ + \"static/media/ding.d2cf02a6.mp3\";","import { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ElevatorImg from \"../elv.png\"\r\nimport useCountDown from \"../hooks/useCountDown\";\r\nimport useSound from 'use-sound';\r\n\r\nimport DingSfx from '../ding.mp3'\r\n\r\nconst Elevator = ({\r\n    elevatorIndex,\r\n    elevatorsQueues,\r\n    elevatorDelay,\r\n    elevatorSpeed,\r\n    elevatorLocation,\r\n    removeFromQueue,\r\n    updateElevatorLocation }) => {\r\n\r\n    const [play] = useSound(DingSfx);\r\n\r\n    const elevatorQueue = elevatorsQueues[elevatorIndex]\r\n    let nextFloor = elevatorQueue[0] || null\r\n    let travelDuration = (Math.abs(elevatorQueue[0] - elevatorLocation) / elevatorSpeed) || null\r\n\r\n    const [timeLeft, { start }] = useCountDown(elevatorDelay, 100);\r\n    useEffect(() => {\r\n        if (timeLeft > 0 && timeLeft <= 100) {\r\n            removeFromQueue(elevatorIndex)\r\n        }\r\n    }, [timeLeft])\r\n\r\n    const handleAnimationEnd = () => {\r\n        // Then -> makesound -> \r\n        console.log('SOUND!!!!');\r\n        play()\r\n        // Then -> wait 2 sec ->\r\n        start(elevatorDelay * 1000)\r\n        updateElevatorLocation(elevatorIndex)\r\n    }\r\n\r\n    const forcedLocation = nextFloor ? nextFloor : elevatorLocation\r\n\r\n    return <ElevatorImgElement\r\n        src={ElevatorImg} alt=\"\"\r\n        travelDuration={travelDuration}\r\n        forcedLocation={forcedLocation * 110}\r\n        elevatorLocation={elevatorLocation * 110}\r\n        nextFloor={nextFloor * 110}\r\n        elevatorDelay={elevatorDelay}\r\n        onClick={() => {\r\n            updateElevatorLocation(elevatorIndex)\r\n            removeFromQueue(elevatorIndex)\r\n        }}\r\n        onTransitionEnd={() => handleAnimationEnd()}\r\n    />\r\n}\r\nexport default Elevator\r\n\r\nconst ElevatorImgElement = styled.img`\r\n                position: absolute;\r\n                width: 110px;\r\n                bottom: 0;\r\n                transform: translateY(-${props => props.forcedLocation}px);\r\n                transition: transform ${props => props.travelDuration}s ease;\r\n                `","import Elevator from \"./Elevator\"\r\n\r\nconst ElevatorList = ({\r\n    elevatorsQueues,\r\n    elevatorSpeed,\r\n    elevatorDelay,\r\n    elevatorsLocations,\r\n    removeFromQueue,\r\n    updateElevatorLocation,\r\n    floorsCount\r\n}) => {\r\n    \r\n    return <div className=\"shafts\">\r\n        {elevatorsQueues.map((elevatorQueue, i) => (\r\n            <div\r\n                style={{ \"height\": 110 * floorsCount + 8 + \"px\" }}\r\n                className=\"shaft\"\r\n                key={i}\r\n            >\r\n                <Elevator\r\n                    elevatorIndex={i}\r\n                    // setCanUpdate={setCanUpdate}\r\n                    elevatorsQueues={elevatorsQueues}\r\n                    elevatorSpeed={elevatorSpeed}\r\n                    elevatorDelay={elevatorDelay}\r\n                    elevatorLocation={elevatorsLocations[i]}\r\n                    removeFromQueue={removeFromQueue}\r\n                    updateElevatorLocation={updateElevatorLocation}\r\n                />\r\n            </div>\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default ElevatorList","import { useEffect } from \"react\"\r\nimport useCountDown from \"../hooks/useCountDown\";\r\n\r\nconst Floor = ({\r\n    floorIndex,\r\n    addToQueue,\r\n    elevatorsQueues,\r\n    floorTime }) => {\r\n    \r\n    const isPressed = elevatorsQueues.flat().findIndex(floor => floor === floorIndex) > -1\r\n\r\n    const [timeLeft, { start }] = useCountDown(floorTime, 100);\r\n    useEffect(() => {\r\n        start(floorTime * 1000)\r\n    }, [floorTime])\r\n\r\n    return <div className=\"floor floor-size\">\r\n        <div className=\"blackline\"></div>\r\n\r\n        <button\r\n            className={`controller metal linear ${isPressed ? \"active\" : \"\"}`}\r\n            onClick={() => {\r\n                addToQueue(floorIndex)\r\n            }}\r\n        >\r\n            {floorIndex}\r\n        </button>\r\n\r\n        {timeLeft && <p>{(timeLeft / 1000).toFixed(1)}</p>}\r\n\r\n    </div >\r\n}\r\nexport default Floor","import Floor from \"./Floor\"\r\n\r\nconst FloorList = ({\r\n    floors,\r\n    addToQueue,\r\n    elevatorsQueues,\r\n    floorTimes }) => {\r\n\r\n    return <div className=\"floors\">\r\n        {floors.map((floor, i, floors) => (\r\n            <div\r\n                className=\"floor\" key={i}>\r\n                <Floor\r\n                    floorIndex={i}\r\n                    floorTime={floorTimes[i]}\r\n                    elevatorsQueues={elevatorsQueues}\r\n                    addToQueue={addToQueue}\r\n                />\r\n            </div>)\r\n        )}\r\n    </div>\r\n}\r\n\r\nexport default FloorList","import { useState } from 'react'\r\nimport ElevatorList from './ElevatorList'\r\nimport FloorList from './FloorList'\r\n\r\nconst Building = ({\r\n    floorsCount,\r\n    elevatorsCount,\r\n    elevatorDelay,\r\n    elevatorSpeed }) => {\r\n    \r\n    const floors = [...Array(floorsCount).fill(null)]\r\n    const [elevatorsQueues, setElevatorsQueues] = useState(Array.from(Array(elevatorsCount), () => new Array(0)))\r\n    const [elevatorsLocations, setElevatorsLocations] = useState([...Array(elevatorsCount).fill(0)])\r\n    const [floorsTimes, setFloorsTimes] = useState([...Array(floorsCount).fill(null)])\r\n    const [canUpdate, setCanUpdate] = useState(true)\r\n    \r\n    // useEffect(() => {\r\n    //     console.log('elevatorsQueues:', elevatorsQueues);\r\n    //     console.log('elevatorsLocations:', elevatorsLocations);\r\n    // }, [elevatorsQueues, elevatorsLocations])\r\n\r\n    // Adding floorIndex to elevator-queue after choosing the correct elevator\r\n    const addToQueue = (floorIndex) => {\r\n        // If floor already in one of the queues -> do nothing\r\n        if (elevatorsQueues.flat().findIndex(floor => floor === floorIndex) > -1) return\r\n        // If elevator is already in this floor -> do nothing\r\n        if (elevatorsLocations.flat().findIndex(floor => floor === floorIndex) > -1) return\r\n\r\n        const correctElevatorIndex = getCorrectElevatorIndex(floorIndex)\r\n\r\n        const queuesCopy = [...elevatorsQueues]\r\n        queuesCopy[correctElevatorIndex].push(floorIndex)\r\n        setElevatorsQueues(queuesCopy)\r\n\r\n        updateFloorTimeStart(floorIndex, correctElevatorIndex)\r\n    }\r\n\r\n    const updateFloorTimeStart = (floorIndex, elevatorIndex) => {\r\n        const time = getFloorsTimes(floorIndex, elevatorIndex)\r\n\r\n        // Update floor time\r\n        const floorsTimesCopy = [...floorsTimes]\r\n        floorsTimesCopy[floorIndex] = time\r\n        setFloorsTimes(floorsTimesCopy)\r\n    }\r\n\r\n    const getFloorsTimes = (floorIndex, elevatorIndex) => {\r\n        const floorInQueueIndex = elevatorsQueues[elevatorIndex].findIndex(curr => curr === floorIndex)\r\n        if (floorInQueueIndex === -1) return\r\n        const myQueue = elevatorsQueues[elevatorIndex].slice(0, floorInQueueIndex + 1)\r\n\r\n        let sumOfFloorsToTravel = 0\r\n\r\n        if (myQueue.length > 1) {\r\n            myQueue.forEach((floor, i, queue) => {\r\n                sumOfFloorsToTravel = (i > 0)\r\n                    ? sumOfFloorsToTravel += Math.abs(queue[i] - queue[i - 1])\r\n                    : sumOfFloorsToTravel += 0\r\n            })\r\n        }\r\n\r\n        sumOfFloorsToTravel += Math.abs(elevatorsLocations[elevatorIndex] - myQueue[0])\r\n\r\n        const travelTime = (sumOfFloorsToTravel / elevatorSpeed)\r\n        const delayTime = (elevatorDelay * (myQueue.length - 1))  // - 2 ?\r\n        const time = travelTime + delayTime\r\n\r\n        return time\r\n    }\r\n\r\n    // Removing oldest task from relevant queue using elevator index\r\n    const removeFromQueue = (elevatorIndex) => {\r\n        // If elevator queue is empty -> do nothing\r\n        if (!elevatorsQueues[elevatorIndex].length) return\r\n\r\n        // Update state - assuming remove oldest floor in queue\r\n        const queuesCopy = [...elevatorsQueues]\r\n        queuesCopy[elevatorIndex].shift()\r\n        setElevatorsQueues(queuesCopy)\r\n    }\r\n\r\n    const updateElevatorLocation = (elevatorIndex) => {\r\n        // If elevator queue is empty -> do nothing\r\n        if (!elevatorsQueues[elevatorIndex].length) return\r\n\r\n        // Update state\r\n        const locationCopy = [...elevatorsLocations]\r\n        locationCopy[elevatorIndex] = elevatorsQueues[elevatorIndex][0]\r\n        setElevatorsLocations(locationCopy)\r\n    }\r\n\r\n    const getCorrectElevatorIndex = (floorIndex) => {\r\n        const elevatorsTimes = [...Array(elevatorsCount).fill(Infinity)]\r\n        elevatorsQueues.forEach((queue, elevatorIndex) => {\r\n            queue = [...queue, floorIndex]\r\n           \r\n            let sumOfFloorsToTravel = 0\r\n\r\n            if (queue.length > 1) {\r\n                queue.forEach((floor, i, queue) => {\r\n                    sumOfFloorsToTravel = (i > 0)\r\n                        ? sumOfFloorsToTravel += Math.abs(queue[i] - queue[i - 1])\r\n                        : sumOfFloorsToTravel += 0\r\n                })\r\n            }\r\n\r\n            sumOfFloorsToTravel += Math.abs(elevatorsLocations[elevatorIndex] - floorIndex)\r\n\r\n            const travelTime = (sumOfFloorsToTravel / elevatorSpeed)\r\n            const delayTime = (elevatorDelay * (queue.length - 1))  // - 2 ?\r\n            const time = travelTime + delayTime\r\n           \r\n            elevatorsTimes[elevatorIndex] = time\r\n        })\r\n\r\n        return elevatorsTimes.indexOf(Math.min(...elevatorsTimes));\r\n    }\r\n\r\n    return <section>\r\n        <header>\r\n            <h1>Speed: {elevatorSpeed} floors/sec</h1>\r\n            <h1>Delay: {elevatorDelay} seconds</h1>\r\n        </header>\r\n        <div className=\"building\">\r\n            <FloorList\r\n                floors={floors}\r\n                addToQueue={addToQueue}\r\n                canUpdate={canUpdate}\r\n                elevatorsQueues={elevatorsQueues}\r\n                floorTimes={floorsTimes}\r\n            />\r\n           <ElevatorList \r\n                setCanUpdate={setCanUpdate}\r\n                elevatorsQueues={elevatorsQueues}\r\n                elevatorSpeed={elevatorSpeed}\r\n                elevatorDelay={elevatorDelay}\r\n                elevatorsLocations={elevatorsLocations}\r\n                removeFromQueue={removeFromQueue}\r\n                updateElevatorLocation={updateElevatorLocation}\r\n                floorsCount={floorsCount}\r\n            />\r\n        </div>\r\n    </section>\r\n}\r\nexport default Building","import \"./help.css\";\nimport \"./main.css\";\nimport Building from \"./components/Building\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport db from \"./db.json\";\n\nfunction App() {\n\tconst [buildings, setBuildings] = useState([]);\n\n\tconst fetchData = useCallback(async () => {\n\t\tlet response = await db;\n\t\tsetBuildings(response);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [fetchData]);\n\n\tif (!buildings || !buildings.length) return <h1>\"Loading...\"</h1>\n\telse\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"street\">\n\t\t\t\t\t{buildings.map((building) => (\n\t\t\t\t\t\t<Building\n\t\t\t\t\t\t\tkey={building.id}\n\t\t\t\t\t\t\tfloorsCount={building.floorsCount}\n\t\t\t\t\t\t\televatorsCount={building.elevatorsCount}\n\t\t\t\t\t\t\televatorSpeed={building.elevatorSpeed}\n\t\t\t\t\t\t\televatorDelay={building.elevatorDelay}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}